import { Bot, Context, session, SessionFlavor } from "grammy";
import OpenAI from "openai";
import fs from "fs/promises";
import path from "path";

// Session interface for storing user state
interface SessionData {
  step:
    | "idle"
    | "start"
    | "event_type"
    | "event_name"
    | "event_date"
    | "event_time"
    | "event_location"
    | "style_preference"
    | "media_upload"
    | "generating";
  eventData: {
    photos?: string[];
    type?: string;
    name?: string;
    date?: string;
    time?: string;
    location?: string;
    style?: string;
  };
}

type BotContext = Context & SessionFlavor<SessionData>;

// Initialize OpenAI client lazily
let openaiClient: OpenAI | null = null;

function getOpenAI(): OpenAI {
  if (!openaiClient) {
    if (!process.env.OPENAI_API_KEY) {
      throw new Error("OPENAI_API_KEY environment variable is required");
    }
    openaiClient = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    });
  }
  return openaiClient;
}

// Initialize bot lazily
let botInstance: Bot<BotContext> | null = null;

function createBot(): Bot<BotContext> {
  if (!process.env.TELEGRAM_BOT_TOKEN) {
    throw new Error("TELEGRAM_BOT_TOKEN environment variable is required");
  }

  const bot = new Bot<BotContext>(process.env.TELEGRAM_BOT_TOKEN);

  // Install session middleware
  bot.use(
    session({
      initial: (): SessionData => ({
        step: "idle",
        eventData: { photos: [] },
      }),
    })
  );

  // Start command
  bot.command("start", (ctx) => {
    ctx.session.step = "idle";
    ctx.session.eventData = { photos: [] };

    return ctx.reply(
      "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –∫—Ä–∞—Å–∏–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.\n\n" +
        "–ö–æ–º–∞–Ω–¥—ã:\n" +
        "/create - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ\n" +
        "/stats - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≤–∞—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n" +
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    );
  });

  // Create invitation command
  bot.command("create", (ctx) => {
    ctx.session.step = "event_type";
    ctx.session.eventData = { photos: [] };

    return ctx.reply(
      "üéä –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!\n\n" +
        "–°–Ω–∞—á–∞–ª–∞ —Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–æ–µ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Å–≤–∞–¥—å–±–∞, –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è, —é–±–∏–ª–µ–π, –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤)"
    );
  });

  // Handle photos
  bot.on("message:photo", async (ctx) => {
    if (ctx.session.step === "media_upload") {
      const photo = ctx.msg.photo[ctx.msg.photo.length - 1];

      // Check file size first (Telegram limit: 20MB for bot API)
      if (photo.file_size && photo.file_size > 20 * 1024 * 1024) {
        return ctx.reply(
          "‚ùå –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20 –ú–ë\n" +
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∂–∞—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ"
        );
      }

      try {
        // Get file info from Telegram
        const file = await ctx.api.getFile(photo.file_id);
        const photoFileName = `photo_${Date.now()}_${ctx.from!.id}.jpg`;
        const localPhotoPath = `/photos/${photoFileName}`;
        const fullLocalPath = path.join(
          process.cwd(),
          "public",
          "photos",
          photoFileName
        );

        // Download photo from Telegram
        const telegramPhotoUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN}/${file.file_path}`;

        // Create photos directory if it doesn't exist
        await fs.mkdir(path.dirname(fullLocalPath), { recursive: true });

        // Download and save the photo
        const response = await fetch(telegramPhotoUrl);
        if (!response.ok) {
          throw new Error(`Failed to download photo: ${response.statusText}`);
        }

        const buffer = Buffer.from(await response.arrayBuffer());
        await fs.writeFile(fullLocalPath, buffer);

        console.log(`‚úÖ Photo saved to: ${fullLocalPath}`);

        // Store the web-accessible path
        ctx.session.eventData.photos = ctx.session.eventData.photos || [];
        ctx.session.eventData.photos.push(localPhotoPath);

        return ctx.reply(
          `‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –í—Å–µ–≥–æ —Ñ–æ—Ç–æ: ${ctx.session.eventData.photos.length}\n` +
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
        );
      } catch (error) {
        console.error("‚ùå Error processing photo:", error);
        return ctx.reply(
          "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞."
        );
      }
    }
  }); // Handle documents (photos sent as documents)
  bot.on("message:document", async (ctx) => {
    if (ctx.session.step === "media_upload") {
      const document = ctx.msg.document;

      // Only accept image documents
      const isImage = document.mime_type?.startsWith("image/");

      if (!isImage) {
        return ctx.reply(
          "‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ\n" +
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
        );
      }

      // Check file size
      if (document.file_size && document.file_size > 20 * 1024 * 1024) {
        return ctx.reply(
          "‚ùå –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ! –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20 –ú–ë\n" +
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∂–∞—Ç—å —Ñ–æ—Ç–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ"
        );
      }

      try {
        // Get file info from Telegram
        const file = await ctx.api.getFile(document.file_id);
        const photoFileName = `photo_${Date.now()}_${ctx.from!.id}.jpg`;
        const localPhotoPath = `/photos/${photoFileName}`;
        const fullLocalPath = path.join(
          process.cwd(),
          "public",
          "photos",
          photoFileName
        );

        // Download photo from Telegram
        const telegramPhotoUrl = `https://api.telegram.org/file/bot${process.env.TELEGRAM_BOT_TOKEN}/${file.file_path}`;

        // Create photos directory if it doesn't exist
        await fs.mkdir(path.dirname(fullLocalPath), { recursive: true });

        // Download and save the photo
        const response = await fetch(telegramPhotoUrl);
        if (!response.ok) {
          throw new Error(`Failed to download photo: ${response.statusText}`);
        }

        const buffer = Buffer.from(await response.arrayBuffer());
        await fs.writeFile(fullLocalPath, buffer);

        console.log(`‚úÖ Photo document saved to: ${fullLocalPath}`);

        // Store the web-accessible path
        ctx.session.eventData.photos = ctx.session.eventData.photos || [];
        ctx.session.eventData.photos.push(localPhotoPath);

        return ctx.reply(
          `‚úÖ –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ! –í—Å–µ–≥–æ —Ñ–æ—Ç–æ: ${ctx.session.eventData.photos.length}
` + "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
        );
      } catch (error) {
        console.error("‚ùå Error processing photo document:", error);
        return ctx.reply(
          "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞."
        );
      }
    }
  });

  // Done command to finish media upload
  bot.command("done", async (ctx) => {
    console.log("üìã /done command received, session step:", ctx.session.step);

    if (ctx.session.step === "media_upload") {
      ctx.session.step = "generating";

      try {
        await ctx.reply(
          "ü§ñ –°–æ–∑–¥–∞—é –∫—Ä–∞—Å–∏–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –ò–ò... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
        );
        console.log("üí° Starting invitation generation...");

        // Generate HTML invitation
        const invitationHtml = await generateInvitation(
          ctx.session.eventData,
          ctx.from!.id
        );
        console.log("‚úÖ Invitation HTML generated successfully");

        // Save invitation
        const eventId = `event_${Date.now()}_${ctx.from!.id}`;
        const invitationPath = path.join(
          process.cwd(),
          "public",
          "invitations",
          `${eventId}.html`
        );
        console.log("üíæ Saving invitation to:", invitationPath);

        // Ensure invitations directory exists
        await fs.mkdir(path.dirname(invitationPath), { recursive: true });
        await fs.writeFile(invitationPath, invitationHtml);
        console.log("‚úÖ Invitation file saved successfully");

        // Create registration file
        const registrationPath = path.join(
          process.cwd(),
          "data",
          `${eventId}_registrations.txt`
        );
        await fs.writeFile(registrationPath, "");
        console.log("‚úÖ Registration file created");

        const invitationUrl = `${
          process.env.NEXTAUTH_URL || "http://localhost:3000"
        }/invitations/${eventId}`;
        console.log("üîó Invitation URL:", invitationUrl);

        ctx.session.step = "idle";
        ctx.session.eventData = { photos: [] };

        // Send success message first
        await ctx.reply(
          `üéä –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!\n\n` +
            ` ID –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: ${eventId}\n\n` +
            `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π`
        );

        // Send clickable link as separate message
        return ctx.reply(`${invitationUrl}`, {
          link_preview_options: { is_disabled: false },
        });
      } catch (error) {
        console.error("‚ùå Error generating invitation:", error);
        ctx.session.step = "idle";
        return ctx.reply(
          "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n" +
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /create —Å–Ω–æ–≤–∞."
        );
      }
    } else {
      console.log(
        "‚ö†Ô∏è /done called but not in media_upload step. Current step:",
        ctx.session.step
      );
      return ctx.reply("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π /create");
    }
  });

  // Stats command - show user's events with buttons
  bot.command("stats", async (ctx) => {
    try {
      const userId = ctx.from!.id;
      const dataDir = path.join(process.cwd(), "data");

      // Get all registration files
      const files = await fs.readdir(dataDir);
      const userEvents = files
        .filter(
          (file) =>
            file.includes(`_${userId}_`) && file.endsWith("_registrations.txt")
        )
        .map((file) => {
          const eventId = file.replace("_registrations.txt", "");
          return eventId;
        });

      if (userEvents.length === 0) {
        return ctx.reply(
          "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /create —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–≤–æ–µ!"
        );
      }

      // Create inline keyboard with event buttons
      const keyboard = {
        inline_keyboard: userEvents.map((eventId, index) => [
          {
            text: `üìä –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ ${index + 1} - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞`,
            callback_data: `stats_${eventId}`,
          },
          {
            text: `üìã –°–ø–∏—Å–æ–∫ –≥–æ—Å—Ç–µ–π`,
            callback_data: `list_${eventId}`,
          },
        ]),
      };

      return ctx.reply(
        `üìä –í–∞—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (${userEvents.length}):\n\n` +
          `–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:`,
        { reply_markup: keyboard }
      );
    } catch (error) {
      console.error("Error in stats command:", error);
      return ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π");
    }
  });

  // Handle callback queries from inline keyboard buttons
  bot.on("callback_query:data", async (ctx) => {
    const data = ctx.callbackQuery.data;

    if (data.startsWith("stats_")) {
      const eventId = data.replace("stats_", "");

      try {
        const registrationPath = path.join(
          process.cwd(),
          "data",
          `${eventId}_registrations.txt`
        );
        const registrations = await fs.readFile(registrationPath, "utf-8");
        const lines = registrations
          .trim()
          .split("\n")
          .filter((line) => line.length > 0);

        let totalPeople = 0;
        const registeredGuests = lines.length;

        lines.forEach((line) => {
          const parts = line.split(" | ");
          if (parts.length >= 2) {
            totalPeople += parseInt(parts[1]) || 1;
          }
        });

        await ctx.answerCallbackQuery();
        return ctx.reply(
          `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π\n\n` +
            `üë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –≥–æ—Å—Ç–µ–π: ${registeredGuests}\n` +
            `üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π: ${totalPeople}`
        );
      } catch {
        await ctx.answerCallbackQuery();
        return ctx.reply("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π");
      }
    }

    if (data.startsWith("list_")) {
      const eventId = data.replace("list_", "");

      try {
        const registrationPath = path.join(
          process.cwd(),
          "data",
          `${eventId}_registrations.txt`
        );
        const registrations = await fs.readFile(registrationPath, "utf-8");
        const lines = registrations
          .trim()
          .split("\n")
          .filter((line) => line.length > 0);

        if (lines.length === 0) {
          await ctx.answerCallbackQuery();
          return ctx.reply(
            "üìù –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–∞ —ç—Ç–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ"
          );
        }

        let message = `üìã –°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≥–æ—Å—Ç–µ–π:\n\n`;

        lines.forEach((line, index) => {
          const parts = line.split(" | ");
          if (parts.length >= 2) {
            const name = parts[0];
            const count = parts[1];
            message += `${index + 1}. ${name} (${count} —á–µ–ª.)\n`;
          }
        });

        await ctx.answerCallbackQuery();
        return ctx.reply(message);
      } catch {
        await ctx.answerCallbackQuery();
        return ctx.reply("‚ùå –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π");
      }
    }
  });

  // Help command
  bot.command("help", (ctx) => {
    return ctx.reply(
      "ü§ñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:\n\n" +
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n" +
        "/create - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ\n" +
        "/stats - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≤–∞—à–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É\n" +
        "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    );
  });

  // Handle messages based on session step (fallback handler - should be last)
  bot.on("message:text", async (ctx) => {
    const step = ctx.session.step;
    const text = ctx.msg.text;

    // Skip if it's a command (let command handlers process it)
    if (text.startsWith("/")) {
      return;
    }

    switch (step) {
      case "event_type":
        ctx.session.eventData.type = text;
        ctx.session.step = "event_name";
        return ctx.reply("üìù –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:");

      case "event_name":
        ctx.session.eventData.name = text;
        ctx.session.step = "event_date";
        return ctx.reply(
          "üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15 –∏—é–Ω—è 2024):"
        );

      case "event_date":
        ctx.session.eventData.date = text;
        ctx.session.step = "event_time";
        return ctx.reply("‚è∞ –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 18:00):");

      case "event_time":
        ctx.session.eventData.time = text;
        ctx.session.step = "event_location";
        return ctx.reply("üìç –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è:");

      case "event_location":
        ctx.session.eventData.location = text;
        ctx.session.step = "style_preference";
        return ctx.reply(
          "üé® –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:\n\n" +
            "1Ô∏è‚É£ **–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π** - –ß–µ—Ä–Ω–æ-–±–µ–ª—ã–π, —Å—Ç—Ä–æ–≥–∏–π, —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π\n" +
            "   ‚ö´ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è: –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –¥–µ–ª–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á\n\n" +
            "2Ô∏è‚É£ **–ù–µ–∂–Ω—ã–π** - –ü–∞—Å—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–Ω–∞, –º—è–≥–∫–∏–µ –æ—Ç—Ç–µ–Ω–∫–∏\n" +
            "   üå∏ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è: —Å–≤–∞–¥—å–±, –¥–µ—Ç—Å–∫–∏—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤, —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π\n\n" +
            "3Ô∏è‚É£ **–Ø—Ä–∫–∏–π** - –ù–∞—Å—ã—â–µ–Ω–Ω—ã–µ —Ü–≤–µ—Ç–∞, –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–π –¥–∏–∑–∞–π–Ω\n" +
            "   üåà –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è: –≤–µ—á–µ—Ä–∏–Ω–æ–∫, –º–æ–ª–æ–¥–µ–∂–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –ø—Ä–∞–∑–¥–Ω–æ–≤–∞–Ω–∏–π\n\n" +
            "4Ô∏è‚É£ **–ó–æ–ª–æ—Ç–æ–π** - –ó–æ–ª–æ—Ç—ã–µ –∞–∫—Ü–µ–Ω—Ç—ã, –ø—Ä–µ–º–∏—É–º-—Å—Ç–∏–ª—å\n" +
            "   ‚ú® –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è: —é–±–∏–ª–µ–µ–≤, –≤–∞–∂–Ω—ã—Ö —Ç–æ—Ä–∂–µ—Å—Ç–≤, VIP-—Å–æ–±—ã—Ç–∏–π\n\n" +
            "5Ô∏è‚É£ **–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π** - –û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–π, —á–∏—Å—Ç—ã–π –¥–∏–∑–∞–π–Ω\n" +
            "   ‚ö™ –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è: —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π, –±–∏–∑–Ω–µ—Å-–≤—Å—Ç—Ä–µ—á\n\n" +
            "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ 5 ‚¨ÜÔ∏è"
        );

      case "style_preference":
        const styleMap: { [key: string]: string } = {
          "1": "–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π",
          "2": "–Ω–µ–∂–Ω—ã–π",
          "3": "—è—Ä–∫–∏–π",
          "4": "–∑–æ–ª–æ—Ç–æ–π",
          "5": "–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π",
        };

        if (styleMap[text]) {
          ctx.session.eventData.style = styleMap[text];
          ctx.session.step = "media_upload";
          return ctx.reply(
            `‚úÖ –í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å: **${styleMap[text]}**\n\n` +
              "üì∏ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è!\n\n" +
              "üìè –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:\n" +
              "‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 20 –ú–ë –Ω–∞ —Ñ–æ—Ç–æ\n" +
              "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n\n" +
              "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /done –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –Ω—É–∂–Ω—ã"
          );
        } else {
          return ctx.reply("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –æ—Ç 1 –¥–æ 5");
        }

      default:
        return ctx.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º");
    }
  });

  // Global error handler
  bot.catch(async (err) => {
    console.error("‚ùå Bot error:", err);

    // Try to send a user-friendly error message
    try {
      if (err.ctx && err.ctx.reply) {
        const errorMsg = err.error as { description?: string };
        if (errorMsg?.description?.includes("file is too big")) {
          await err.ctx.reply(
            "‚ùå –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ!\n" +
              "üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 20 –ú–ë\n\n" +
              "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∂–∞—Ç—å —Ñ–æ—Ç–æ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–Ω–æ–≤–∞"
          );
        } else {
          await err.ctx.reply(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
          );
        }
      }
    } catch (replyError) {
      console.error("Failed to send error message to user:", replyError);
    }
  });

  return bot;
}

// Generate invitation HTML using OpenAI
async function generateInvitation(
  eventData: SessionData["eventData"],
  userId: number
): Promise<string> {
  console.log("üîÑ Generating invitation with data:", eventData);

  const prompt = `You are a world-class web designer. Create a BEAUTIFUL invitation that MUST follow the user's exact style choice.

EVENT DETAILS:
- Type: ${eventData.type}
- Name: ${eventData.name} 
- Date: ${eventData.date}
- Time: ${eventData.time}
- Location: ${eventData.location}
- Photos: ${eventData.photos?.length || 0} uploaded
- USER'S STYLE CHOICE: "${eventData.style || "–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π"}"

üö® CRITICAL: You MUST implement the "${
    eventData.style || "–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π"
  }" style exactly as specified below!

TECHNICAL SETUP:
- Include: <script src="https://cdn.tailwindcss.com"></script>
- Use ONLY Tailwind CSS utility classes

MANDATORY STYLE IMPLEMENTATION:

${(() => {
  switch (eventData.style) {
    case "–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π":
      return `üñ§ –ö–õ–ê–°–°–ò–ß–ï–°–ö–ò–ô STYLE - Black & White Elegance:
- Background: bg-white or bg-gray-50
- Text: text-gray-900 (black) for headers, text-gray-700 for content
- Typography: font-serif EVERYWHERE
- Borders: border-gray-900 (black borders), not gray-200
- Buttons: bg-gray-900 text-white
- Accents: ONLY black, white, and subtle grays
- NO colors except black/white/gray!`;

    case "–Ω–µ–∂–Ω—ã–π":
      return `üå∏ –ù–ï–ñ–ù–´–ô STYLE - Soft Pastels & Romance:
- Background: bg-rose-50 or bg-pink-50 (light pink background)
- Headers: text-rose-600 or text-pink-600 (pink headers)
- Content text: text-rose-700 or text-purple-600
- Typography: font-sans with gentle curves
- Borders: border-rose-200 or border-pink-200 (soft pink borders)
- Buttons: bg-rose-500 hover:bg-rose-600 text-white (pink buttons)
- Accents: rose-100, pink-100, purple-50, lavender tones
- Hearts: Use ‚ô° üíï üå∏ symbols
- Soft shadows: shadow-lg shadow-rose-100
- NO gray colors! ONLY soft pastels!`;

    case "—è—Ä–∫–∏–π":
      return `üåà –Ø–†–ö–ò–ô STYLE - Bold & Vibrant:
- Background: bg-gradient-to-br from-blue-400 to-purple-600
- Headers: text-white or text-yellow-300 (bright contrast)
- Content: text-blue-900 on light sections
- Typography: font-bold and font-black
- Borders: border-blue-500 or border-purple-500 (bright borders)
- Buttons: bg-yellow-400 text-blue-900 hover:bg-yellow-300
- Accents: blue-600, purple-600, yellow-400, orange-500
- Celebrations: Use üéâ ‚ú® üéä symbols
- Strong shadows: shadow-xl shadow-blue-500/50
- MUST be colorful and energetic!`;

    case "–∑–æ–ª–æ—Ç–æ–π":
      return `‚ú® –ó–û–õ–û–¢–û–ô STYLE - Luxury Gold Theme:
- Background: bg-gradient-to-br from-yellow-50 to-amber-100
- Headers: text-yellow-700 or text-amber-800 (gold text)
- Content: text-yellow-800
- Typography: font-serif with elegant styling
- Borders: border-yellow-400 or border-amber-400 (gold borders)  
- Buttons: bg-gradient-to-r from-yellow-500 to-amber-600 text-white
- Accents: yellow-100, amber-200, gold tones throughout
- Luxury symbols: Use ‚ú® üëë üíé symbols
- Premium shadows: shadow-2xl shadow-yellow-500/30
- EVERYTHING must have gold/amber/yellow theme!`;

    default:
      return `‚ö™ –ú–ò–ù–ò–ú–ê–õ–¨–ù–´–ô STYLE - Ultra Clean:
- Background: bg-white only
- Headers: text-gray-900 (pure black)
- Content: text-gray-600
- Typography: font-sans clean and simple
- Borders: border-gray-100 only (very subtle)
- Buttons: bg-gray-900 text-white (simple black)
- Accents: ONLY white, gray-50, gray-100
- Maximum whitespace, minimal elements
- NO colors at all - pure minimalism!`;
  }
})()}

PHOTO INTEGRATION:
${
  eventData.photos?.length
    ? `
*** USE THESE EXACT PHOTO PATHS - NO PLACEHOLDERS ***
${eventData.photos
  .map(
    (photo, i) =>
      `<img src="${photo}" alt="–§–æ—Ç–æ ${
        i + 1
      }" class="rounded-lg shadow-md hover:shadow-lg transition-shadow">`
  )
  .join("\n")}

- Grid layout: grid grid-cols-2 gap-4
- Style photos according to the ${eventData.style} theme
- NEVER use placeholder images!`
    : `- No photos provided`
}

FORM REQUIREMENTS:
- Russian labels: "–ü–æ–ª–Ω–æ–µ –∏–º—è", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ—Å—Ç–µ–π"
- Field names: name="fullName", name="peopleCount", name="eventId"
- eventId value: "EVENT_ID_PLACEHOLDER"
- Form action="/api/register" method="POST"
- Style form inputs according to ${eventData.style} theme

EVENT SYMBOL: ${
    eventData.type === "—Å–≤–∞–¥—å–±–∞"
      ? "‚ô°"
      : eventData.type?.includes("–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è")
      ? "‚≠ê"
      : "‚ú®"
  }

üö® ABSOLUTE REQUIREMENTS:
1. You MUST use the exact colors specified for "${eventData.style}" style
2. NO generic gray designs allowed
3. The design MUST visually match the style choice
4. Include <script src="/js/form-handler.js"></script> before </body>
5. All text in Russian
6. Mobile responsive

Return ONLY HTML code without markdown formatting.`;

  try {
    console.log("ü§ñ Calling OpenAI API...");
    const openai = getOpenAI();
    const completion = await openai.chat.completions.create({
      model: "gpt-4o", // Latest model for better HTML/CSS generation
      messages: [
        {
          role: "system",
          content:
            "You are an expert web designer specializing in beautiful, responsive invitation designs. Always return clean, modern HTML with embedded CSS.",
        },
        { role: "user", content: prompt },
      ],
      max_tokens: 6000,
    });
    console.log("‚úÖ OpenAI API response received");

    let html = completion.choices[0].message.content || "";

    // Clean up any markdown formatting from OpenAI response
    html = html
      .replace(/```html\s*/g, "")
      .replace(/```\s*/g, "")
      .replace(/^```/gm, "")
      .trim();

    // Replace placeholder with actual event ID
    const eventId = `event_${Date.now()}_${userId}`;
    html = html.replace(/EVENT_ID_PLACEHOLDER/g, eventId);
    console.log("‚úÖ HTML generated and event ID replaced");

    return html;
  } catch (error) {
    console.error("‚ùå OpenAI API error:", error);
    const errorMessage =
      error instanceof Error ? error.message : "Unknown error";
    throw new Error(`Failed to generate invitation: ${errorMessage}`);
  }
}

// Ensure data directories exist
async function ensureDirectories() {
  const dataDir = path.join(process.cwd(), "data");
  const uploadsDir = path.join(process.cwd(), "public", "uploads");

  try {
    await fs.access(dataDir);
  } catch {
    await fs.mkdir(dataDir, { recursive: true });
  }

  try {
    await fs.access(uploadsDir);
  } catch {
    await fs.mkdir(uploadsDir, { recursive: true });
  }
}

// Export a getter function for the bot
export function getBot(): Bot<BotContext> {
  if (!botInstance) {
    botInstance = createBot();
  }
  return botInstance;
}

// Export bot as a getter for backwards compatibility
export const bot = {
  get api() {
    return getBot().api;
  },
  start: () => getBot().start(),
  stop: () => getBot().stop(),
};

// Initialize directories on startup
ensureDirectories().catch(console.error);
