"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";

export default function Pricing() {
  const router = useRouter();
  const [selectedPlan, setSelectedPlan] = useState<string>("");
  const [paymentMethod, setPaymentMethod] = useState<string>("kaspi");

  const plans = [
    {
      id: "basic",
      name: "–ë–∞–∑–æ–≤—ã–π",
      price: 990,
      currency: "‚Ç∏",
      type: "one-time",
      features: [
        "–°–æ–∑–¥–∞–Ω–∏–µ 1 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è",
        "–î–æ 5 —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π",
        "–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –º—É–∑—ã–∫–∏",
        "10 —Ü–≤–µ—Ç–æ–≤—ã—Ö —Å—Ç–∏–ª–µ–π",
        "Scroll –∞–Ω–∏–º–∞—Ü–∏–∏",
        "–§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≥–æ—Å—Ç–µ–π",
        "–ú–æ–±–∏–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è",
      ],
      popular: false,
    },
    {
      id: "pro",
      name: "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π",
      price: 2990,
      currency: "‚Ç∏",
      type: "monthly",
      features: [
        "–î–æ 100 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –≤ –º–µ—Å—è—Ü",
        "–ë–µ–∑–ª–∏–º–∏—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π",
        "–°–æ–±—Å—Ç–≤–µ–Ω–Ω–∞—è –º—É–∑—ã–∫–∞",
        "–í—Å–µ —Ü–≤–µ—Ç–æ–≤—ã–µ —Å—Ç–∏–ª–∏",
        "–ü—Ä–µ–º–∏—É–º –∞–Ω–∏–º–∞—Ü–∏–∏",
        "–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤",
        "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
        "–ë–µ–∑ –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤",
        "–≠–∫—Å–ø–æ—Ä—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
      ],
      popular: true,
    },
    {
      id: "enterprise",
      name: "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π",
      price: 9990,
      currency: "‚Ç∏",
      type: "monthly",
      features: [
        "–ë–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π",
        "–ö–∞—Å—Ç–æ–º–Ω—ã–µ –¥–∏–∑–∞–π–Ω—ã",
        "API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è",
        "–ë–µ–ª—ã–π –ª–µ–π–±–ª",
        "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä",
        "SLA –ø–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7",
        "–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "–ú–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∞–∫–∫–∞—É–Ω—Ç—ã",
      ],
      popular: false,
    },
  ];

  const paymentMethods = [
    {
      id: "kaspi",
      name: "Kaspi Pay",
      icon: "üí≥",
      description: "–ë—ã—Å—Ç—Ä–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Kaspi",
    },
    {
      id: "card",
      name: "–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞",
      icon: "üí∞",
      description: "Visa, MasterCard",
    },
    {
      id: "halyk",
      name: "Halyk Bank",
      icon: "üè™",
      description: "–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ Halyk",
    },
  ];

  const handlePayment = async () => {
    if (!selectedPlan) {
      alert("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω");
      return;
    }

    const plan = plans.find((p) => p.id === selectedPlan);
    if (!plan) return;

    try {
      // Simulate payment processing
      await new Promise((resolve) => setTimeout(resolve, 2000));

      // Mock success
      alert(
        `‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–ü–ª–∞–Ω: ${plan.name}\n–°—É–º–º–∞: ${plan.price}${
          plan.currency
        }\n–ú–µ—Ç–æ–¥: ${paymentMethods.find((m) => m.id === paymentMethod)?.name}`
      );

      // Redirect to create invitation
      router.push("/create");
    } catch {
      alert("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 to-blue-50">
      <div className="max-w-6xl mx-auto px-4 py-16">
        {/* Header */}
        <div className="text-center mb-16">
          <h1 className="text-4xl font-bold text-gray-900 mb-4">
            –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω
          </h1>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto">
            –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∫—Ä–∞—Å–∏–≤—ã–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –ò–ò. –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π
            –ø–æ–¥—Ö–æ–¥–∏—Ç –∏–º–µ–Ω–Ω–æ –≤–∞–º.
          </p>
        </div>

        {/* Pricing Cards */}
        <div className="grid lg:grid-cols-3 gap-8 mb-16">
          {plans.map((plan) => (
            <div
              key={plan.id}
              className={`relative bg-white rounded-2xl shadow-lg transition-all duration-300 hover:shadow-xl ${
                selectedPlan === plan.id
                  ? "ring-2 ring-blue-500 shadow-2xl"
                  : ""
              } ${plan.popular ? "scale-105" : ""}`}
            >
              {plan.popular && (
                <div className="absolute -top-4 left-1/2 transform -translate-x-1/2">
                  <span className="bg-gradient-to-r from-blue-600 to-purple-600 text-white px-6 py-2 rounded-full text-sm font-medium">
                    –ü–æ–ø—É–ª—è—Ä–Ω—ã–π
                  </span>
                </div>
              )}

              <div className="p-8">
                <div className="text-center mb-8">
                  <h3 className="text-2xl font-bold text-gray-900 mb-2">
                    {plan.name}
                  </h3>
                  <div className="flex justify-center items-baseline mb-4">
                    <span className="text-5xl font-extrabold text-gray-900">
                      {plan.price}
                    </span>
                    <span className="text-xl text-gray-500 ml-1">
                      {plan.currency}
                    </span>
                  </div>
                  <p className="text-gray-500">
                    {plan.type === "monthly" ? "–≤ –º–µ—Å—è—Ü" : "—Ä–∞–∑–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂"}
                  </p>
                </div>

                <ul className="space-y-4 mb-8">
                  {plan.features.map((feature, index) => (
                    <li key={index} className="flex items-start">
                      <span className="text-green-500 mr-3 mt-1">‚úì</span>
                      <span className="text-gray-600">{feature}</span>
                    </li>
                  ))}
                </ul>

                <button
                  onClick={() => setSelectedPlan(plan.id)}
                  className={`w-full py-4 px-6 rounded-xl font-semibold transition-all duration-200 ${
                    selectedPlan === plan.id
                      ? "bg-blue-600 text-white shadow-lg"
                      : plan.popular
                      ? "bg-gradient-to-r from-blue-600 to-purple-600 text-white hover:shadow-lg"
                      : "bg-gray-100 text-gray-900 hover:bg-gray-200"
                  }`}
                >
                  {selectedPlan === plan.id ? "–í—ã–±—Ä–∞–Ω–æ ‚úì" : "–í—ã–±—Ä–∞—Ç—å –ø–ª–∞–Ω"}
                </button>
              </div>
            </div>
          ))}
        </div>

        {/* Payment Methods */}
        {selectedPlan && (
          <div className="max-w-2xl mx-auto bg-white rounded-2xl shadow-lg p-8 mb-8">
            <h3 className="text-2xl font-bold text-gray-900 mb-6 text-center">
              –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
            </h3>

            <div className="grid gap-4 mb-8">
              {paymentMethods.map((method) => (
                <label
                  key={method.id}
                  className={`flex items-center p-4 border-2 rounded-lg cursor-pointer transition-all ${
                    paymentMethod === method.id
                      ? "border-blue-500 bg-blue-50"
                      : "border-gray-200 hover:border-gray-300"
                  }`}
                >
                  <input
                    type="radio"
                    name="paymentMethod"
                    value={method.id}
                    checked={paymentMethod === method.id}
                    onChange={(e) => setPaymentMethod(e.target.value)}
                    className="sr-only"
                  />
                  <span className="text-3xl mr-4">{method.icon}</span>
                  <div>
                    <div className="font-semibold text-gray-900">
                      {method.name}
                    </div>
                    <div className="text-sm text-gray-500">
                      {method.description}
                    </div>
                  </div>
                  {paymentMethod === method.id && (
                    <span className="ml-auto text-blue-500">‚úì</span>
                  )}
                </label>
              ))}
            </div>

            <button
              onClick={handlePayment}
              disabled={!selectedPlan}
              className="w-full bg-gradient-to-r from-green-600 to-green-700 text-white py-4 px-8 rounded-xl font-semibold text-lg hover:from-green-700 hover:to-green-800 transition-all duration-200 shadow-lg hover:shadow-xl disabled:opacity-50 disabled:cursor-not-allowed"
            >
              üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {plans.find((p) => p.id === selectedPlan)?.price}
              {plans.find((p) => p.id === selectedPlan)?.currency}
            </button>
          </div>
        )}

        {/* Security Notice */}
        <div className="max-w-2xl mx-auto text-center text-gray-500 text-sm">
          <p className="mb-2">üîí –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –∑–∞—â–∏—â–µ–Ω—ã SSL-—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º</p>
          <p>
            –ù–∞–∂–∏–º–∞—è &quot;–û–ø–ª–∞—Ç–∏—Ç—å&quot;, –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å{" "}
            <a href="/terms" className="text-blue-600 hover:underline">
              –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º
            </a>{" "}
            –∏{" "}
            <a href="/privacy" className="text-blue-600 hover:underline">
              –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
            </a>
          </p>
        </div>
      </div>
    </div>
  );
}
